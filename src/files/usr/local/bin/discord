#!/bin/bash

# Exit on error, undefined variables, and pipe failure
set -euo pipefail

# Set download URL and destination
DISCORD_URL="https://discord.com/api/download?platform=linux&format=tar.gz"
DOWNLOAD_DIR="$HOME/Downloads"
DISCORD_ARCHIVE="$DOWNLOAD_DIR/discord.tar.gz"
DISCORD_FOLDER="$DOWNLOAD_DIR/Discord"

get_local_version() {
    if [[ -f "$DISCORD_FOLDER/resources/build_info.json" ]]; then
        jq -r '.version' "$DISCORD_FOLDER/resources/build_info.json"
    else
        echo "not installed"
    fi
}

get_latest_version() {
    curl -s https://discord.com/api/updates?platform=linux | jq -r '.name'
}

open_or_focus_discord() {
    cd "$DISCORD_FOLDER"

    # Wayland hints if applicable
    if [[ -n "${WAYLAND_DISPLAY:-}" ]]; then
        export OZONE_PLATFORM=wayland
        export XDG_SESSION_TYPE=wayland
    fi

    ./Discord "$@"
}

# Check if discord is already running
if pgrep -x "Discord" > /dev/null; then
    open_or_focus_discord
    exit 0
fi

notify-send "Discord: Fetching local and remote versions..."

LOCAL_VERSION=$(get_local_version)
LATEST_VERSION=$(get_latest_version)

if [[ "$LOCAL_VERSION" == "not installed" ]]; then
    notify-send "Discord: Not installed. Downloading latest version ($LATEST_VERSION)..."
elif [[ "$LOCAL_VERSION" == "$LATEST_VERSION" ]]; then
    notify-send "Discord: Already up-to-date (version $LOCAL_VERSION). Opening..."
else
    notify-send "Discord: Update available! Current version: $LOCAL_VERSION. Downloading latest version: $LATEST_VERSION..."
fi

if [[ ! -d "$DISCORD_FOLDER" || "$LOCAL_VERSION" != "$LATEST_VERSION" ]]; then
    wget -O "$DISCORD_ARCHIVE" "$DISCORD_URL"

    notify-send "Discord: Extracting and installing Discord $LATEST_VERSION..."
    mkdir -p "$DISCORD_FOLDER"
    tar -xzf "$DISCORD_ARCHIVE" -C "$DISCORD_FOLDER" --strip-components=1
    chmod +x "$DISCORD_FOLDER/Discord" || true

    rm "$DISCORD_ARCHIVE"
    notify-send "Discord: Discord $LATEST_VERSION has been installed successfully. Opening..."
fi

open_or_focus_discord
